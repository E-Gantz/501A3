My initial design was to allow the user to create multiple separate objects, and then have each of them serialized. 
I then realised that the " Allow the user to create one or more objects from a selection of objects using some sort of text-based menu system or GUI" part of the assignment description probably meant that we create one object to serialize, and it can contain multiple other objects.
So, my first major refactoring was removing the user's ability to create multiple of the 5 types of objects, which involved removing loops and arraylists, minor renaming, and changing return types. (commit 4)
My second major refactoring was when I had finished all the functionality for simple objects and started extending what I had to work with objects with references to other objects. 
This involved adding a new serialize method that didn't create a new document, changing the inspector to go through an object with references, and filling in the object section of the field serialization. (commit 13)
Next, I extracted some sub methods from deserialize(document) because it was getting a bit long, and it made it easier to work on the object and field parts.
    Additionally, I created a new method for setting objects such that the main object used one method, and its fields that were objects used a different method for creating those objects. (commit 14)
I didn't do much more refactoring until after I finished serialization and deserialization for all 5 object types, so post-commit 24 (commit 24)
At this point my serializer and deserializer were both fairly stinky, mostly due to duplicated code.
I started the clean up process by combining the array and object behavior in the Serializer.serializeFieldValue method, because it was the exact same code in two different places. (commit 26)
Then I noticed that my code did the exact same 3 steps in a few different places: create a value/reference element for an object, set its text to something, add it to the object its inside of.
    So I extracted a new method addRefValElement and moved these steps into it so I could call that instead of using duplicate code (commit 27)
    I then did the same with a new method checkAndAdd for the recurring steps "if iMap doesn't have a key for this object, add it and put it in the list to be serialized" (commit 28)
    At this point I was happy with Serializer and moved on to Deserializer 
My first step in cleaning up Deserializer was to take any long chains of catches for specific exceptions that were using the same behavior (just printing stack trace) and combine them into one catch for a general exception. 
    The behavior didn't change as I wasn't doing any real error handling with them, but it made the code considerably more readable. Additionally, this would catch any exceptions I had missed by only using specific exceptions.
    (commit 29)
Next I created a new method findObject for some duplicated code that would find a child element of the document that matched a given id. (commit 30)